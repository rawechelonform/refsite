/* ===== Local font faces ===== */
@font-face {
  font-family: 'Pixel Warden';
  src: url('fonts/pixelwarden/PixelWarden.ttf') format('truetype');
  font-weight: normal;
  font-style: normal;
  font-display: block;
}
@font-face {
  font-family: 'FS TI-92 ENO C';
  src: url('fonts/fs-ti-92-eno-c/fs-ti-92-eno-c.ttf') format('truetype');
  font-weight: normal;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: 'RetroByte';
  src: url('fonts/retrobyte/RetroByte.ttf') format('truetype');
  font-weight: normal;
  font-style: normal;
  font-display: block;
}

/* avoid FOUT while Coral Pixels loads */
.fonts-loading .section-title { visibility: hidden; }

/* ===== Theme tokens ===== */
:root {
  --thumb-h: 14px;
  --maxw: 1040px;
  --bg: #000;
  --fg: #fff;
  --border: #444;
  --muted: #aaa;

  /* shared right rail for stage & thumbs (keeps right edges aligned) */
  --rail-w: 90%;
  --right-gutter: 80px;

  /* caption spacing */
  --caption-gap: 16px;           /* distance between caption and image (desktop) */
  --caption-maxw: 260px;

  /* responsive caption typography — smaller desktop defaults */
  --caption-size-min: 9px;
  --caption-size-ideal: 0.75vw;
  --caption-size-max: 11px;
  --caption-track: 0.005em;
}

/* ===== Base ===== */
html, body { height: 100%; }
body {
  margin: 0;
  background: var(--bg);
  color: var(--fg);
  font: 16px/1.5 system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial;
}

/* page wrapper */
.page {
  padding: 24px 0 48px;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 18px;
}

/* header (menu styles in menubar.css) */
.section-title {
  width: 100vw;
  margin-left: calc(50% - 50vw);
  margin-right: calc(50% - 50vw);
  font-family: 'RetroByte', monospace;
  font-size: 50px;
  font-weight: normal;
  text-align: left;
  color: rgb(143,143,143);
  border-bottom: 2px solid #bbb;
  margin-top: 10px;
  margin-bottom: 6px;
}
.section-title > span {
  display: inline-block;
  padding-left: 50px;
  padding-bottom: 4px;
}

/* ===== Carousel container ===== */
.carousel {
  width: 100%;
  max-width: var(--maxw);
  user-select: none;
  display: block;
}

/* ===== Stage (image area) — image flush-right with thumbs ===== */
.stage { position: relative; padding: 0; } /* gutter handled in .stage-inner */

/* RIGHT-ALIGNED FLEX ROW: [caption] —gap— [image]
   align-items:flex-end keeps bottoms aligned. */
.stage-inner {
  position: relative;
  width: var(--rail-w);
  margin-left: auto;                 /* push rail to the right edge */
  padding-right: var(--right-gutter);
  display: flex;
  justify-content: flex-end;         /* whole row flush-right */
  align-items: flex-end;             /* caption bottom == image bottom */
  gap: var(--caption-gap);
}

/* Make sure order is caption then image (even if DOM differs) */
.caption { order: 1; }
#stageImg { order: 2; }

#stageImg {
  display: block;
  margin-left: 0;
  max-width: 90%;                    /* visual scale of artwork */
  max-height: 76vh;
  height: auto;
}

/* ===== Caption (left of image on desktop) ===== */
.caption {
  margin: 0;
  padding: 0;
  color: #ddd;
  text-align: right;                 /* lean text toward the image */
  width: max-content;                /* shrink-wrap to text */
  max-width: var(--caption-maxw);    /* but don’t exceed this width */
  overflow-wrap: anywhere;           /* wrap long bits if needed */

  /* OCR-A font + responsive size */
  font-family: "ocr-a-std", "OCR A Std", "OCR A", monospace;
  font-size: clamp(var(--caption-size-min),
                   var(--caption-size-ideal),
                   var(--caption-size-max));
  letter-spacing: var(--caption-track);
  line-height: 1.45;
}

/* No italics even if <em> appears */
.caption em { font-style: normal; font-synthesis: none; transform: none; }

/* ===== Thumbnails — same right rail/gutter as stage ===== */
.thumbBarWrap {
  width: var(--rail-w);
  margin-left: auto;
  margin-top: 12px;
  padding-right: var(--right-gutter);
  text-align: right;                 /* thumbs flush-right */
}
.thumbBar { display: inline-flex; gap: 12px; }
.thumbBar::-webkit-scrollbar { height: 10px; }
.thumbBar::-webkit-scrollbar-thumb { background: #cfcfcf; }

/* thumbnails */
.thumb { background: none; border: none; padding: 0; margin: 0; cursor: pointer; }
.thumb img { height: 50px; width: auto; display: block; border: none; }

/* selected thumbnail outline */
.thumb.active { outline: 2px solid #444; outline-offset: 0; }

/* keyboard focus visible without breaking active box */
.thumb:focus-visible { outline: 2px dashed #777; outline-offset: 0; }
.thumb.active:focus,
.thumb.active:focus-visible { outline: 2px solid #444 !important; outline-offset: 0; }

/* Diagnostics (optional) */
.diag { margin-top: 10px; font-size: 12px; color: #555; }
.diag code { background: #f5f5f5; padding: 2px 4px; border: 1px solid #eee; }

/* ===== Responsive ===== */
@media (max-width: 720px) {
  :root {
    --caption-size-min: 6.5px;
    --caption-size-ideal: 1.0vw;
    --caption-size-max: 8px;
    --caption-track: 0.005em;
    --caption-gap: 8px;
  }

  .page { padding: 16px 10px 32px; }

  /* stack image → caption (flush right), caption sits above thumbnails */
  .stage-inner {
    width: var(--rail-w);
    margin-left: auto;          /* keeps the rail flush right */
    padding-right: 16px;        /* right gutter on phones */
    display: flex;
    flex-direction: column;     /* stack vertically */
    align-items: flex-end;      /* flush right */
    gap: var(--caption-gap);
  }

  /* image first, full width of rail */
  #stageImg {
    order: 1;
    max-width: 100%;
    height: auto;
  }

  /* caption second, between image and thumbnails, flush right */
  .caption {
    order: 2;
    width: auto;
    max-width: 90%;             /* keeps lines from getting too long */
    text-align: right;
    margin: 0;
    padding: 0;
    line-height: 1.35;

    /* prevent single-letter wrapping */
    overflow-wrap: normal;
    word-break: normal;
  }

  /* thumbnails below, aligned to same right rail */
  .thumbBarWrap {
    width: var(--rail-w);
    margin-left: auto;
    padding-right: 16px;
    text-align: right;
    margin-top: 10px;
  }
}

/* Prevent caption "flash" before JS moves it into the stage */
.caption { visibility: hidden; }
.stage .stage-inner .caption { visibility: visible; }



(() => {
  const overlay = document.getElementById('sky-overlay');
  if (!overlay) return;

  const reduceMotion = window.matchMedia('(prefers-reduced-motion: reduce)');
  let paused = document.hidden;

  // Tweakables
  const MIN_INTERVAL_MS = 3000;   // min gap between stars
  const MAX_INTERVAL_MS = 12000;  // max gap between stars
  const MIN_DURATION_MS = 900;    // shortest streak
  const MAX_DURATION_MS = 1800;   // longest streak
  const ANGLE_DEG_MIN = 24;       // shallow diagonal
  const ANGLE_DEG_MAX = 36;

  function scheduleNext() {
    const wait = rand(MIN_INTERVAL_MS, MAX_INTERVAL_MS);
    setTimeout(() => {
      if (!paused && !reduceMotion.matches) spawnStar();
      scheduleNext();
    }, wait);
  }

  function spawnStar() {
    const star = document.createElement('div');
    star.className = 'shooting-star';

    const vw = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
    const vh = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);

    const startX = rand(-0.15 * vw, 0.35 * vw);
    const startY = rand(-0.10 * vh, 0.35 * vh);

    const path = rand(1.1, 1.5) * Math.hypot(vw, vh);

    const angleDeg = rand(ANGLE_DEG_MIN, ANGLE_DEG_MAX);
    const angleRad = angleDeg * Math.PI / 180;

    const dx = Math.cos(angleRad) * path;
    const dy = Math.sin(angleRad) * path;

    star.style.left = `${startX}px`;
    star.style.top  = `${startY}px`;
    star.style.setProperty('--sg-angle', `${angleDeg}deg`);
    star.style.setProperty('--sg-dx', `${dx}px`);
    star.style.setProperty('--sg-dy', `${dy}px`);

    const duration = rand(MIN_DURATION_MS, MAX_DURATION_MS);
    const delay = rand(0, 250);
    star.style.animation = `sg_streak ${duration}ms ease-out ${delay}ms forwards`;

    star.addEventListener('animationend', () => star.remove());
    overlay.appendChild(star);
  }

  function rand(min, max) {
    if (Number.isInteger(min) && Number.isInteger(max)) {
      return Math.floor(Math.random() * (max - min + 1)) + min;
    }
    return Math.random() * (max - min) + min;
  }

  document.addEventListener('visibilitychange', () => { paused = document.hidden; });

  if (!reduceMotion.matches) {
    setTimeout(() => spawnStar(), rand(800, 2500));
    scheduleNext();
  }
})();
